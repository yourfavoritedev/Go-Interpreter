package compiler

import (
	"github.com/yourfavoritedev/golang-interpreter/ast"
	"github.com/yourfavoritedev/golang-interpreter/code"
	"github.com/yourfavoritedev/golang-interpreter/object"
)

// Compiler will create Bytecode for the VM to execute.
// The Compiler will leverage the evaluated abstract-syntax-tree to
// compile the necessary attributes for Bytecode. This includes the
// instructions (generated bytecode) and constants (the constant pool).
type Compiler struct {
	instructions code.Instructions
	constants    []object.Object
}

// New simply initializes a new Compiler
func New() *Compiler {
	return &Compiler{
		instructions: code.Instructions{},
		constants:    []object.Object{},
	}
}

func (c *Compiler) Compile(node ast.Node) error {
	return nil
}

// ByteCode constructs a ByteCode struct using the Compiler's
// instructions and constants
func (c *Compiler) ByteCode() *Bytecode {
	return &Bytecode{
		Instructions: c.instructions,
		Constants:    c.constants,
	}
}

// Bytecode is the struct for the representation of bytecode that
// will be passed to the VM. The Compiler will generate the Instructions
// and the Constants that were evaluated.
type Bytecode struct {
	Instructions code.Instructions
	Constants    []object.Object
}
